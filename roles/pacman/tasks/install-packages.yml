- name: Get list of installed packages
  ansible.builtin.command: pacman -Qq
  register: installed_pkgs
  changed_when: false

- name: Determine missing packages
  ansible.builtin.set_fact:
    missing_packages: "{{ packages | difference(installed_pkgs.stdout_lines) }}"

- name: Show missing packages
  ansible.builtin.debug:
    msg: "Installing: {{ missing_packages }}"
  when: missing_packages | length > 0

- name: Install only missing packages
  community.general.pacman:
    name: "{{ missing_packages }}"
    state: present
  become: true
  when: missing_packages | length > 0

- name: Clean up /tmp to free space
  ansible.builtin.shell: |
    find /tmp -type f -name "*.tar.xz" -delete || true
    find /tmp -type d -name "tmp.*" -exec rm -rf {} + || true
  become: true
  ignore_errors: true

- name: Install yay
  kewlfft.aur.aur:
    name: "yay"
    use: makepkg
    state: present
  become: true
  become_user: aur_builder
  ignore_errors: true
  register: yay_install_result

- name: Show yay installation result
  ansible.builtin.debug:
    msg: "yay installation: {{ 'SUCCESS' if yay_install_result.rc == 0 else 'FAILED - ' + (yay_install_result.msg | default('Unknown error')) }}"
  when: yay_install_result is defined

- name: Install aur packages one by one
  kewlfft.aur.aur:
    name: "{{ item }}"
    state: present
  become: true
  become_user: aur_builder
  ignore_errors: true
  register: aur_install_results
  loop: "{{ aur_packages }}"

- name: Show AUR package installation results
  ansible.builtin.debug:
    msg: "{{ item.item }}: {{ 'SUCCESS' if item.rc == 0 else 'FAILED - ' + (item.msg | default('Unknown error') | regex_replace('\n', ' ')) }}"
  loop: "{{ aur_install_results.results }}"
  when: aur_install_results is defined

# - name: Install AUR packages
#   kewlfft.aur.aur:
#     name: "{{ aurpackages }}"
#     use: yay
#     state: present
#   become: true
#   become_user: aur_builder
#   ignore_errors: true
